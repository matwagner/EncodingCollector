<?php
//============================================================================
//
//                  E n c o d i n g P r o c e s s o r . p h p
//
/// @file           EncodingProcessor.php
///
/// @brief          Processes the encodings using XSLT from the character set
///                 database generated by EncodingCollector.php.
///
/// @author         Matthias Wagner
/// @version        1.0
/// @since          1.0
/// @date           2016-12-11 Wagner First release
///
//============================================================================

set_time_limit( 10000 ); // 10 seconds should be enough :-)
error_reporting( E_ALL );

$rc = 0; ///< Return code

if ( $argc < 3 )
{
   print "Usage: ".$argv[0]." <XSL stylesheet> <XML document>".PHP_EOL;
   $rc = 1;
}

if ( $argc > 2 )
{
   $xslstylesheet = $argv[1];
   $xmldocument   = $argv[2];
}

if ( $rc == 0 )
{
   $stylesheet = new DOMDocument( "1.0", "UTF-8" );
   $stylesheet->preserveWhitespace = false;
   if ( $stylesheet->load( $xslstylesheet ) == false )
   {
      print "      Cannot open ".$xslstylesheet.".".PHP_EOL;
      $rc = 2;
   }
}

if ( $rc == 0 )
{
   $document = new DOMDocument( "1.0", "US-ASCII" );
   $document->preserveWhitespace = false;
   if ( $document->load( $xmldocument ) == false )
   {
      print "      Cannot open ".$xmldocument.".".PHP_EOL;
      $rc = 3;
   }
}

if ( $rc == 0 )
{
   $processor = new XSLTProcessor();
   // $processor->setProfiling( "profiling.txt" );
   // $processor->setParameter( "xmlns", "xlink", "http://www.w3.org/1999/xlink" );
   if ( $processor->importStyleSheet( $stylesheet ) == false )
   {
      print "      Cannot import ".$xslstylesheet.".".PHP_EOL;
      $rc = 4;
   }
}

if ( $rc == 0 )
{
   echo $processor->transformToXML( $document );
}

return $rc;
?>
